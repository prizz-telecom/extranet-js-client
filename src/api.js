// @flow
/* eslint-disable no-use-before-define */
/**
 * Prizz-Telecom Extranet API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "https://my.tests.prizz-telecom.fr".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}

/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}


            export type AddServiceContractCommentContentTypeEnum = 'text' | 'markdown';
/**
 * 
 * @export
 */
export type AddServiceContractComment = {
    /**
     * 
     * @type {string}
     * @memberof AddServiceContractComment
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof AddServiceContractComment
     */
    threadId?: number;
    /**
     * 
     * @type {number}
     * @memberof AddServiceContractComment
     */
    parentId?: number;
    /**
     * 
     * @type {string}
     * @memberof AddServiceContractComment
     */
    contentType?: AddServiceContractCommentContentTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AddServiceContractComment
     */
    content?: string;
}

/**
 * 
 * @export
 */
export type ArchivedProcess = {
    /**
     * 
     * @type {number}
     * @memberof ArchivedProcess
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ArchivedProcess
     */
    lib?: string;
    /**
     * 
     * @type {string}
     * @memberof ArchivedProcess
     */
    state?: string;
    /**
     * 
     * @type {number}
     * @memberof ArchivedProcess
     */
    status_code?: number;
    /**
     * 
     * @type {string}
     * @memberof ArchivedProcess
     */
    create_date?: string;
    /**
     * 
     * @type {string}
     * @memberof ArchivedProcess
     */
    process_class?: string;
}

/**
 * 
 * @export
 */
export type Attachment = {
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof Attachment
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Attachment
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    category?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    mimeType?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    presignedUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof Attachment
     */
    presignedUrlExpires?: Date;
}

/**
 * 
 * @export
 */
export type ClientContract = {
    /**
     * 
     * @type {number}
     * @memberof ClientContract
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientContract
     */
    name?: string;
    /**
     * 
     * @type {PriceList}
     * @memberof ClientContract
     */
    priceList?: PriceList;
    /**
     * 
     * @type {number}
     * @memberof ClientContract
     */
    paymentTermDays?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ClientContract
     */
    vatReverseCharge?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ClientContract
     */
    invoiceConsolidation?: boolean;
}


            export type ClientLegalEntityAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type ClientLegalEntity = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof ClientLegalEntity
     */
    availableWorkflows?: Array<ClientLegalEntityAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof ClientLegalEntity
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientLegalEntity
     */
    houseNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    houseNumberComplement?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    streetName?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    inseeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    numVatIntracommunity?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    siren?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    codeApe?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    rcs?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    tel?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof ClientLegalEntity
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientLegalEntity
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientLegalEntity
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof ClientLegalEntity
     */
    y?: number;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    projection?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntity
     */
    arcepCode?: string;
    /**
     * 
     * @type {Array<Contact>}
     * @memberof ClientLegalEntity
     */
    contacts?: Array<Contact>;
    /**
     * 
     * @type {Array<TypedContact>}
     * @memberof ClientLegalEntity
     */
    configuredContacts?: Array<TypedContact>;
    /**
     * 
     * @type {Array<ClientContract>}
     * @memberof ClientLegalEntity
     */
    contracts?: Array<ClientContract>;
    /**
     * 
     * @type {Array<UserRole>}
     * @memberof ClientLegalEntity
     */
    roles?: Array<UserRole>;
}

/**
 * 
 * @export
 */
export type ClientLegalEntitySearch = {
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    index?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ClientLegalEntitySearch
     */
    legalEntityIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    siren?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    tel?: string;
    /**
     * 
     * @type {string}
     * @memberof ClientLegalEntitySearch
     */
    email?: string;
    /**
     * 
     * @type {Array<ContactSearch>}
     * @memberof ClientLegalEntitySearch
     */
    contacts?: Array<ContactSearch>;
}

/**
 * 
 * @export
 */
export type Comment = {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Comment
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Comment
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    content?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    contentType?: string;
}

/**
 * 
 * @export
 */
export type CommentThread = {
    /**
     * 
     * @type {number}
     * @memberof CommentThread
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof CommentThread
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CommentThread
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof CommentThread
     */
    owner?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentThread
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof CommentThread
     */
    entityClass?: string;
    /**
     * 
     * @type {number}
     * @memberof CommentThread
     */
    entityId?: number;
    /**
     * 
     * @type {string}
     * @memberof CommentThread
     */
    _public?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommentThread
     */
    subscribers?: Array<string>;
    /**
     * 
     * @type {Array<CommentTree>}
     * @memberof CommentThread
     */
    comments?: Array<CommentTree>;
}

/**
 * 
 * @export
 */
export type CommentTree = {
    /**
     * 
     * @type {Comment}
     * @memberof CommentTree
     */
    comment?: Comment;
    /**
     * 
     * @type {Array<CommentTree>}
     * @memberof CommentTree
     */
    children?: Array<CommentTree>;
}


            export type CommercialOfferAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';

            export type CommercialOfferStatusEnum = 'new' | 'estimate_pending' | 'approval_pending' | 'validated' | 'abandoned' | 'signed';
/**
 * 
 * @export
 */
export type CommercialOffer = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof CommercialOffer
     */
    availableWorkflows?: Array<CommercialOfferAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof CommercialOffer
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommercialOffer
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CommercialOffer
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    notes?: string;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof CommercialOffer
     */
    rcTotal?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommercialOffer
     */
    rcTotalStr?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof CommercialOffer
     */
    rcVATTotal?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof CommercialOffer
     */
    rcVATTotalStr?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof CommercialOffer
     */
    nrcTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    nrcTotalStr?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOffer
     */
    nrcVATTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    nrcVATTotalStr?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    status?: CommercialOfferStatusEnum;
    /**
     * 
     * @type {LegalEntity}
     * @memberof CommercialOffer
     */
    legalEntity?: LegalEntity;
    /**
     * 
     * @type {ClientLegalEntity}
     * @memberof CommercialOffer
     */
    clientLegalEntity?: ClientLegalEntity;
    /**
     * 
     * @type {Date}
     * @memberof CommercialOffer
     */
    signDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CommercialOffer
     */
    submitDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof CommercialOffer
     */
    deliveryDelay?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOffer
     */
    total?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    totalStr?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOffer
     */
    vatTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    vatTotalStr?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOffer
     */
    sectionNames?: string;
    /**
     * 
     * @type {Array<CommercialOfferVatDetailInner>}
     * @memberof CommercialOffer
     */
    vatDetail?: Array<CommercialOfferVatDetailInner>;
    /**
     * 
     * @type {Array<CommercialOfferVatDetailStrInner>}
     * @memberof CommercialOffer
     */
    vatDetailStr?: Array<CommercialOfferVatDetailStrInner>;
    /**
     * 
     * @type {Array<CommercialOfferSection>}
     * @memberof CommercialOffer
     */
    sections?: Array<CommercialOfferSection>;
    /**
     * 
     * @type {Array<Contact>}
     * @memberof CommercialOffer
     */
    contacts?: Array<Contact>;
    /**
     * 
     * @type {Array<TypedContact>}
     * @memberof CommercialOffer
     */
    configuredContacts?: Array<TypedContact>;
}


            export type CommercialOfferItemAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';

            export type CommercialOfferItemRecurrenceEnum = 'monthly' | 'yearly' | 'half-yearly' | 'quaterly';
/**
 * 
 * @export
 */
export type CommercialOfferItem = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof CommercialOfferItem
     */
    availableWorkflows?: Array<CommercialOfferItemAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    unitPriceStr?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    vat?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    recurrence?: CommercialOfferItemRecurrenceEnum;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    unitPriceDiscount?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    unitPriceDiscountStr?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    houseNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    houseNumberComplement?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    streetName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    inseeCode?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    y?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    projection?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    price?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    sectionId?: number;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    commercialOfferId?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    priceStr?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferItem
     */
    vatRate?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    commercialCode?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferItem
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CommercialOfferItem
     */
    toEstimate?: boolean;
    /**
     * 
     * @type {PriceListItem}
     * @memberof CommercialOfferItem
     */
    priceListItem?: PriceListItem;
}

/**
 * 
 * @export
 */
export type CommercialOfferSearch = {
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    index?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    legalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    clientLegalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    notes?: string;
    /**
     * 
     * @type {Date}
     * @memberof CommercialOfferSearch
     */
    createDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSearch
     */
    sectionNames?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CommercialOfferSearch
     */
    addresses?: Array<string>;
}


            export type CommercialOfferSectionAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type CommercialOfferSection = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof CommercialOfferSection
     */
    availableWorkflows?: Array<CommercialOfferSectionAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferSection
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSection
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof CommercialOfferSection
     */
    commercialOfferId?: number;
    /**
     * 
     * @type {string}
     * @memberof CommercialOfferSection
     */
    clientReference?: string;
    /**
     * 
     * @type {Array<CommercialOfferItem>}
     * @memberof CommercialOfferSection
     */
    commercialOfferItems?: Array<CommercialOfferItem>;
    /**
     * 
     * @type {Offer}
     * @memberof CommercialOfferSection
     */
    offer?: Offer;
    /**
     * 
     * @type {ServiceContract}
     * @memberof CommercialOfferSection
     */
    serviceContract?: ServiceContract;
    /**
     * 
     * @type {ClientContract}
     * @memberof CommercialOfferSection
     */
    clientContract?: ClientContract;
}

/**
 * 
 * @export
 */
export type CommercialOfferVatDetailInner = {
    /**
     * taux de tva
     * @type {number}
     * @memberof CommercialOfferVatDetailInner
     */
    vat?: number;
    /**
     * total HT pour cette tva
     * @type {number}
     * @memberof CommercialOfferVatDetailInner
     */
    total_without_taxes?: number;
    /**
     * montant pour cette tva
     * @type {number}
     * @memberof CommercialOfferVatDetailInner
     */
    total?: number;
}

/**
 * 
 * @export
 */
export type CommercialOfferVatDetailStrInner = {
    /**
     * taux de tva
     * @type {number}
     * @memberof CommercialOfferVatDetailStrInner
     */
    vat?: number;
    /**
     * total HT pour cette tva
     * @type {string}
     * @memberof CommercialOfferVatDetailStrInner
     */
    total_without_taxes?: string;
    /**
     * montant pour cette tva
     * @type {string}
     * @memberof CommercialOfferVatDetailStrInner
     */
    total?: string;
}


            export type ContactAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type Contact = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof Contact
     */
    availableWorkflows?: Array<ContactAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof Contact
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    phone1?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    phone2?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    gender?: string;
    /**
     * 
     * @type {Date}
     * @memberof Contact
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Contact
     */
    lastModifiedDate?: Date;
}

/**
 * 
 * @export
 */
export type ContactSearch = {
    /**
     * 
     * @type {string}
     * @memberof ContactSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactSearch
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactSearch
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactSearch
     */
    phone1?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactSearch
     */
    phone2?: string;
}

/**
 * 
 * @export
 */
export type CreateCommercialOffer = {
    /**
     * 
     * @type {number}
     * @memberof CreateCommercialOffer
     */
    legalEntityId?: number;
    /**
     * 
     * @type {number}
     * @memberof CreateCommercialOffer
     */
    clientLegalEntityId?: number;
}

/**
 * 
 * @export
 */
export type CreateCommercialOffer201Response = {
    /**
     * 
     * @type {number}
     * @memberof CreateCommercialOffer201Response
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof CreateCommercialOffer201Response
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CreateCommercialOffer201Response
     */
    lastLog?: string;
}

/**
 * 
 * @export
 */
export type CreateCommercialOfferSection = {
    /**
     * 
     * @type {string}
     * @memberof CreateCommercialOfferSection
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommercialOfferSection
     */
    clientReference?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCommercialOfferSection
     */
    clientContractId?: number;
}

/**
 * 
 * @export
 */
export type CreateEligibility = {
    /**
     * list your clientlegalentities used for eligibility, give an indication of pricelists and contracts used
     * @type {Array<ClientLegalEntity>}
     * @memberof CreateEligibility
     */
    entities?: Array<ClientLegalEntity>;
    /**
     * workflow ids where you can get responses
     * @type {Array<number>}
     * @memberof CreateEligibility
     */
    responses?: Array<number>;
}

/**
 * 
 * @export
 */
export type CreateOperator = {
    /**
     * 
     * @type {number}
     * @memberof CreateOperator
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateOperator
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateOperator
     */
    lib?: string;
}

/**
 * 
 * @export
 */
export type CreateTicket = {
    /**
     * 
     * @type {string}
     * @memberof CreateTicket
     */
    numero?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateTicket
     */
    ticket_id?: number;
    /**
     * 
     * @type {Array<RunningProcess>}
     * @memberof CreateTicket
     */
    running_process?: Array<RunningProcess>;
}


            export type CreateWorkflowContextNameEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type CreateWorkflow = {
    /**
     * 
     * @type {string}
     * @memberof CreateWorkflow
     */
    contextName?: CreateWorkflowContextNameEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateWorkflow
     */
    entityId?: number;
}

/**
 * 
 * @export
 */
export type EligibilityHistory = {
    /**
     * 
     * @type {number}
     * @memberof EligibilityHistory
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof EligibilityHistory
     */
    _date?: Date;
    /**
     * 
     * @type {string}
     * @memberof EligibilityHistory
     */
    address?: string;
    /**
     * 
     * @type {ClientLegalEntity}
     * @memberof EligibilityHistory
     */
    client?: ClientLegalEntity;
    /**
     * 
     * @type {Array<EligibilityResult>}
     * @memberof EligibilityHistory
     */
    result?: Array<EligibilityResult>;
}

/**
 * 
 * @export
 */
export type EligibilityHistory200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof EligibilityHistory200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<EligibilityHistory>}
     * @memberof EligibilityHistory200Response
     */
    items?: Array<EligibilityHistory>;
}

/**
 * 
 * @export
 */
export type EligibilityPriceListItem = {
    /**
     * 
     * @type {number}
     * @memberof EligibilityPriceListItem
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EligibilityPriceListItem
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EligibilityPriceListItem
     */
    productName?: string;
    /**
     * 
     * @type {{ [key: string]: AnyType; }}
     * @memberof EligibilityPriceListItem
     */
    attributes?: { [key: string]: AnyType; };
}

/**
 * 
 * @export
 */
export type EligibilityResult = {
    /**
     * 
     * @type {string}
     * @memberof EligibilityResult
     */
    code?: string;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    tech?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    delivery?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    grtMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    grtMax?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EligibilityResult
     */
    grtNonWorkingHoursOptionAvailable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EligibilityResult
     */
    grtNonWorkingHoursOptionMandatory?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    nrcMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    nrcMax?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    commitmentMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    commitmentMax?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    uploadMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    uploadMax?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    downloadMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    downloadMax?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    guaranteedUploadMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    guaranteedUploadMax?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    guaranteeddDownloadMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    guaranteeddDownloadMax?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    rcMin?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    rcMax?: number;
    /**
     * 
     * @type {EligibilityResultPriceListItemsGroups}
     * @memberof EligibilityResult
     */
    priceListItemsGroups?: EligibilityResultPriceListItemsGroups;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    offerId?: number;
    /**
     * 
     * @type {number}
     * @memberof EligibilityResult
     */
    priceListId?: number;
}

/**
 * 
 * @export
 */
export type EligibilityResultPriceListItemsGroups = {
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    main?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    bandwidth?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    commitment?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    grt?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    nrc?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    distance?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    fiber_count?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    extremity_site_a?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    extremity_site_b?: Array<EligibilityPriceListItem>;
    /**
     * 
     * @type {Array<EligibilityPriceListItem>}
     * @memberof EligibilityResultPriceListItemsGroups
     */
    maintenance?: Array<EligibilityPriceListItem>;
}

/**
 * 
 * @export
 */
export type GetApiTokens200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetApiTokens200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<UserApiToken>}
     * @memberof GetApiTokens200Response
     */
    items?: Array<UserApiToken>;
}

/**
 * 
 * @export
 */
export type GetClientLegalEntities200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetClientLegalEntities200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<ClientLegalEntity>}
     * @memberof GetClientLegalEntities200Response
     */
    items?: Array<ClientLegalEntity>;
}

/**
 * 
 * @export
 */
export type GetClientLegalEntities200ResponsePagination = {
    /**
     * 
     * @type {number}
     * @memberof GetClientLegalEntities200ResponsePagination
     */
    page?: number;
    /**
     * 
     * @type {number}
     * @memberof GetClientLegalEntities200ResponsePagination
     */
    itemsPerPage?: number;
    /**
     * 
     * @type {number}
     * @memberof GetClientLegalEntities200ResponsePagination
     */
    totalItems?: number;
    /**
     * 
     * @type {number}
     * @memberof GetClientLegalEntities200ResponsePagination
     */
    pageCount?: number;
}

/**
 * 
 * @export
 */
export type GetCommercialOffers200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetCommercialOffers200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<CommercialOffer>}
     * @memberof GetCommercialOffers200Response
     */
    items?: Array<CommercialOffer>;
}

/**
 * 
 * @export
 */
export type GetEligibility = {
    /**
     * 
     * @type {number}
     * @memberof GetEligibility
     */
    wf?: number;
    /**
     * 
     * @type {string}
     * @memberof GetEligibility
     */
    wfs?: string;
    /**
     * 
     * @type {Object}
     * @memberof GetEligibility
     */
    attrs?: Object;
    /**
     * 
     * @type {Array<Object>}
     * @memberof GetEligibility
     */
    wftr?: Array<Object>;
    /**
     * 
     * @type {ClientLegalEntity}
     * @memberof GetEligibility
     */
    client?: ClientLegalEntity;
    /**
     * 
     * @type {Array<EligibilityResult>}
     * @memberof GetEligibility
     */
    response?: Array<EligibilityResult>;
}

/**
 * 
 * @export
 */
export type GetInvoices200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetInvoices200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<Invoice>}
     * @memberof GetInvoices200Response
     */
    items?: Array<Invoice>;
}

/**
 * 
 * @export
 */
export type GetLegalEntities200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetLegalEntities200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<LegalEntity>}
     * @memberof GetLegalEntities200Response
     */
    items?: Array<LegalEntity>;
}

/**
 * 
 * @export
 */
export type GetPublicAttachments200Response = {
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof GetPublicAttachments200Response
     */
    attachments?: Array<Attachment>;
}

/**
 * 
 * @export
 */
export type GetRunningWorkflows200Response = {
    /**
     * 
     * @type {Array<GetRunningWorkflows200ResponseWorkflowsInner>}
     * @memberof GetRunningWorkflows200Response
     */
    workflows?: Array<GetRunningWorkflows200ResponseWorkflowsInner>;
}

/**
 * 
 * @export
 */
export type GetRunningWorkflows200ResponseWorkflowsInner = {
    /**
     * 
     * @type {number}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    context?: string;
    /**
     * 
     * @type {Date}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    lastRunDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    entityClass?: string;
    /**
     * 
     * @type {number}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    entityId?: number;
    /**
     * 
     * @type {number}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    entityDescription?: number;
    /**
     * 
     * @type {string}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    statusCode?: number;
    /**
     * 
     * @type {string}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    lastLog?: string;
    /**
     * 
     * @type {string}
     * @memberof GetRunningWorkflows200ResponseWorkflowsInner
     */
    html?: string;
}

/**
 * 
 * @export
 */
export type GetServiceContracts200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetServiceContracts200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<ServiceContract>}
     * @memberof GetServiceContracts200Response
     */
    items?: Array<ServiceContract>;
}

/**
 * 
 * @export
 */
export type GetServices200Response = {
    /**
     * 
     * @type {GetClientLegalEntities200ResponsePagination}
     * @memberof GetServices200Response
     */
    pagination?: GetClientLegalEntities200ResponsePagination;
    /**
     * 
     * @type {Array<Service>}
     * @memberof GetServices200Response
     */
    items?: Array<Service>;
}

/**
 * 
 * @export
 */
export type GetWorkflow = {
    /**
     * 
     * @type {number}
     * @memberof GetWorkflow
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof GetWorkflow
     */
    state?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GetWorkflow
     */
    success?: boolean;
    /**
     * 
     * @type {GetWorkflowRedirect}
     * @memberof GetWorkflow
     */
    redirect?: GetWorkflowRedirect;
}

/**
 * 
 * @export
 */
export type GetWorkflowRedirect = {
    /**
     * 
     * @type {string}
     * @memberof GetWorkflowRedirect
     */
    objectClass?: string;
    /**
     * 
     * @type {number}
     * @memberof GetWorkflowRedirect
     */
    objectId?: number;
}


            export type InvoiceAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type Invoice = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof Invoice
     */
    availableWorkflows?: Array<InvoiceAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Invoice
     */
    rcTotal?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Invoice
     */
    rcTotalStr?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: number; }}
     * @memberof Invoice
     */
    rcVATTotal?: { [key: string]: number; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Invoice
     */
    rcVATTotalStr?: { [key: string]: string; };
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    nrcTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    nrcTotalStr?: string;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    nrcVATTotal?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    nrcVATTotalStr?: string;
    /**
     * 
     * @type {ClientLegalEntity}
     * @memberof Invoice
     */
    clientLegalEntity?: ClientLegalEntity;
    /**
     * 
     * @type {LegalEntity}
     * @memberof Invoice
     */
    legalEntity?: LegalEntity;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    ref?: string;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    monthPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    yearPeriod?: number;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    total?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    totalStr?: string;
    /**
     * 
     * @type {number}
     * @memberof Invoice
     */
    totalVAT?: number;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    totalVATStr?: string;
    /**
     * 
     * @type {Array<InvoiceDetail>}
     * @memberof Invoice
     */
    details?: Array<InvoiceDetail>;
    /**
     * 
     * @type {boolean}
     * @memberof Invoice
     */
    useVATReverseCharge?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    dueDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Invoice
     */
    submitDate?: Date;
}


            export type InvoiceDetailAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';

            export type InvoiceDetailRecurrenceEnum = 'monthly' | 'yearly' | 'half-yearly' | 'quaterly';
/**
 * 
 * @export
 */
export type InvoiceDetail = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof InvoiceDetail
     */
    availableWorkflows?: Array<InvoiceDetailAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    unitPriceStr?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    vat?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    recurrence?: InvoiceDetailRecurrenceEnum;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    unitPriceDiscount?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    unitPriceDiscountStr?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    houseNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    houseNumberComplement?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    streetName?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    inseeCode?: string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    y?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    projection?: string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    amount?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    invoiceId?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    amountStr?: string;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    VATrate?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    serviceId?: number;
    /**
     * 
     * @type {number}
     * @memberof InvoiceDetail
     */
    serviceContractId?: number;
    /**
     * 
     * @type {string}
     * @memberof InvoiceDetail
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceDetail
     */
    fromDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceDetail
     */
    toDate?: Date;
}

/**
 * 
 * @export
 */
export type InvoiceSearch = {
    /**
     * 
     * @type {string}
     * @memberof InvoiceSearch
     */
    index?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSearch
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSearch
     */
    legalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSearch
     */
    clientLegalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceSearch
     */
    ref?: string;
    /**
     * 
     * @type {Date}
     * @memberof InvoiceSearch
     */
    createDate?: Date;
}

/**
 * 
 * @export
 */
export type LegalEntity = {
    /**
     * 
     * @type {number}
     * @memberof LegalEntity
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof LegalEntity
     */
    houseNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    houseNumberComplement?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    streetName?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    inseeCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    numVatIntracommunity?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    siren?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    codeApe?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    rcs?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    tel?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof LegalEntity
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LegalEntity
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LegalEntity
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof LegalEntity
     */
    y?: number;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    projection?: string;
    /**
     * 
     * @type {string}
     * @memberof LegalEntity
     */
    logo?: string;
}


            export type OfferOfferTypeEnum = 'DELIVERY_DOOR' | 'L2' | 'FON' | 'TV_ANT' | 'MOBILE';
/**
 * 
 * @export
 */
export type Offer = {
    /**
     * 
     * @type {number}
     * @memberof Offer
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    name?: string;
    /**
     * 
     * @type {OfferItem}
     * @memberof Offer
     */
    mainOfferItem?: OfferItem;
    /**
     * 
     * @type {string}
     * @memberof Offer
     */
    offerType?: OfferOfferTypeEnum;
}

/**
 * 
 * @export
 */
export type OfferContext = {
    /**
     * 
     * @type {number}
     * @memberof OfferContext
     */
    offerId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OfferContext
     */
    isValid?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OfferContext
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferContext
     */
    totalWithoutNrc?: number;
    /**
     * 
     * @type {Array<PriceListItem>}
     * @memberof OfferContext
     */
    items?: Array<PriceListItem>;
}

/**
 * 
 * @export
 */
export type OfferContextShortened = {
    /**
     * 
     * @type {number}
     * @memberof OfferContextShortened
     */
    offerId?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferContextShortened
     */
    total?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferContextShortened
     */
    totalWithoutNrc?: number;
    /**
     * 
     * @type {boolean}
     * @memberof OfferContextShortened
     */
    hasToEstimateProducts?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof OfferContextShortened
     */
    itemsIds?: Array<number>;
    /**
     * 
     * @type {{ [key: string]: AnyType; }}
     * @memberof OfferContextShortened
     */
    attributes?: { [key: string]: AnyType; };
}

/**
 * 
 * @export
 */
export type OfferItem = {
    /**
     * 
     * @type {number}
     * @memberof OfferItem
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OfferItem
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof OfferItem
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof OfferItem
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof OfferItem
     */
    minCount?: number;
    /**
     * 
     * @type {number}
     * @memberof OfferItem
     */
    maxCount?: number;
    /**
     * 
     * @type {Product}
     * @memberof OfferItem
     */
    product?: Product;
    /**
     * 
     * @type {string}
     * @memberof OfferItem
     */
    eligibilityString?: string;
}

/**
 * 
 * @export
 */
export type Operator = {
    /**
     * 
     * @type {string}
     * @memberof Operator
     */
    code?: string;
    /**
     * 
     * @type {string}
     * @memberof Operator
     */
    lib?: string;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof Operator
     */
    delivery_doors?: Array<AnyType>;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof Operator
     */
    hosting_items?: Array<AnyType>;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof Operator
     */
    l2_services?: Array<AnyType>;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof Operator
     */
    fon_services?: Array<AnyType>;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof Operator
     */
    acces_internet_services?: Array<AnyType>;
}

/**
 * 
 * @export
 */
export type OperatorTicket = {
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    numero?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    date_creation?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    date_cloture?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    date_debut_incident?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    date_resolution?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    date_gtr?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorTicket
     */
    etat?: string;
    /**
     * 
     * @type {Array<RunningProcess>}
     * @memberof OperatorTicket
     */
    running_workflows?: Array<RunningProcess>;
    /**
     * 
     * @type {Array<RunningProcess>}
     * @memberof OperatorTicket
     */
    archived_workflows?: Array<RunningProcess>;
}

/**
 * 
 * @export
 */
export type PriceList = {
    /**
     * 
     * @type {number}
     * @memberof PriceList
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof PriceList
     */
    name?: string;
    /**
     * 
     * @type {LegalEntity}
     * @memberof PriceList
     */
    legalEntity?: LegalEntity;
    /**
     * 
     * @type {string}
     * @memberof PriceList
     */
    commercialCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceList
     */
    description?: string;
    /**
     * 
     * @type {Array<PriceListItem>}
     * @memberof PriceList
     */
    items?: Array<PriceListItem>;
}


            export type PriceListItemRecurrenceEnum = 'monthly' | 'yearly' | 'half-yearly' | 'quaterly';
/**
 * 
 * @export
 */
export type PriceListItem = {
    /**
     * 
     * @type {number}
     * @memberof PriceListItem
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof PriceListItem
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof PriceListItem
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PriceListItem
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    unitPriceStr?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    vat?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    recurrence?: PriceListItemRecurrenceEnum;
    /**
     * 
     * @type {number}
     * @memberof PriceListItem
     */
    priceListId?: number;
    /**
     * 
     * @type {Product}
     * @memberof PriceListItem
     */
    product?: Product;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    commercialCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PriceListItem
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PriceListItem
     */
    insideOfferOnly?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PriceListItem
     */
    toEstimate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PriceListItem
     */
    active?: boolean;
}

/**
 * 
 * @export
 */
export type PricesListOffers = {
    /**
     * 
     * @type {Array<Offer>}
     * @memberof PricesListOffers
     */
    offers?: Array<Offer>;
}

/**
 * 
 * @export
 */
export type Process = {
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    context_id?: number;
    /**
     * 
     * @type {number}
     * @memberof Process
     */
    entity_id?: number;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    entity_class?: string;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    process_class?: string;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    start_date?: string;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    state_lib?: string;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    end_date?: string;
    /**
     * 
     * @type {ProcessAttributes}
     * @memberof Process
     */
    attrs?: ProcessAttributes;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    lib?: string;
    /**
     * 
     * @type {string}
     * @memberof Process
     */
    title?: string;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof Process
     */
    states?: Array<AnyType>;
    /**
     * 
     * @type {Array<TicketAttachment>}
     * @memberof Process
     */
    attachments?: Array<TicketAttachment>;
    /**
     * 
     * @type {Array<ProcessAction>}
     * @memberof Process
     */
    actions?: Array<ProcessAction>;
}

/**
 * 
 * @export
 */
export type ProcessAction = {
    /**
     * 
     * @type {string}
     * @memberof ProcessAction
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessAction
     */
    lib?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessAction
     */
    classe?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessAction
     */
    html?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessAction
     */
    _default?: string;
    /**
     * 
     * @type {Array<ProcessActionField>}
     * @memberof ProcessAction
     */
    fields?: Array<ProcessActionField>;
}

/**
 * 
 * @export
 */
export type ProcessActionField = {
    /**
     * 
     * @type {string}
     * @memberof ProcessActionField
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessActionField
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessActionField
     */
    value?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessActionField
     */
    name?: string;
    /**
     * 
     * @type {Array<AnyType>}
     * @memberof ProcessActionField
     */
    values?: Array<AnyType>;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessActionField
     */
    required?: boolean;
}

/**
 * 
 * @export
 */
export type ProcessAttributes = {
    [key: string]: AnyType | any;

    /**
     * 
     * @type {boolean}
     * @memberof ProcessAttributes
     */
    verif_cablage_ok?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessAttributes
     */
    etat_voyants?: string;
    /**
     * 
     * @type {ProcessAttributesQualification}
     * @memberof ProcessAttributes
     */
    qualification?: ProcessAttributesQualification;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessAttributes
     */
    customer_mails?: Array<string>;
    /**
     * 
     * @type {ProcessAttributesMessages}
     * @memberof ProcessAttributes
     */
    messages?: ProcessAttributesMessages;
}

/**
 * 
 * @export
 */
export type ProcessAttributesMessages = {
    /**
     * 
     * @type {Array<ProcessMessage>}
     * @memberof ProcessAttributesMessages
     */
    operateur?: Array<ProcessMessage>;
    /**
     * 
     * @type {Array<ProcessMessage>}
     * @memberof ProcessAttributesMessages
     */
    noc?: Array<ProcessMessage>;
    /**
     * 
     * @type {Array<ProcessMessage>}
     * @memberof ProcessAttributesMessages
     */
    terrain?: Array<ProcessMessage>;
}

/**
 * 
 * @export
 */
export type ProcessAttributesQualification = {
    /**
     * 
     * @type {ProcessAttributesQualificationValues}
     * @memberof ProcessAttributesQualification
     */
    values?: ProcessAttributesQualificationValues;
}

/**
 * 
 * @export
 */
export type ProcessAttributesQualificationValues = {
    /**
     * 
     * @type {string}
     * @memberof ProcessAttributesQualificationValues
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessAttributesQualificationValues
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessAttributesQualificationValues
     */
    date_debut_incident?: string;
}

/**
 * 
 * @export
 */
export type ProcessMessage = {
    /**
     * 
     * @type {string}
     * @memberof ProcessMessage
     */
    _date?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessMessage
     */
    format?: string;
    /**
     * 
     * @type {string}
     * @memberof ProcessMessage
     */
    author?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessMessage
     */
    freeze?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessMessage
     */
    from_us?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessMessage
     */
    message?: string;
}

/**
 * 
 * @export
 */
export type Product = {
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    name?: string;
    /**
     * 
     * @type {Object}
     * @memberof Product
     */
    attributes?: Object;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    productCode?: string;
    /**
     * 
     * @type {ProductGroup}
     * @memberof Product
     */
    group?: ProductGroup;
}


            export type ProductGroupTypeEnum = 'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national';
/**
 * 
 * @export
 */
export type ProductGroup = {
    /**
     * 
     * @type {string}
     * @memberof ProductGroup
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductGroup
     */
    type?: ProductGroupTypeEnum;
}

/**
 * 
 * @export
 */
export type RenameCommercialOfferSection = {
    /**
     * 
     * @type {string}
     * @memberof RenameCommercialOfferSection
     */
    name?: string;
}

/**
 * 
 * @export
 */
export type RunningProcess = {
    /**
     * 
     * @type {number}
     * @memberof RunningProcess
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof RunningProcess
     */
    lib?: string;
    /**
     * 
     * @type {string}
     * @memberof RunningProcess
     */
    state?: string;
    /**
     * 
     * @type {number}
     * @memberof RunningProcess
     */
    status_code?: number;
    /**
     * 
     * @type {string}
     * @memberof RunningProcess
     */
    create_date?: string;
    /**
     * 
     * @type {string}
     * @memberof RunningProcess
     */
    process_class?: string;
}

/**
 * 
 * @export
 */
export type Search200ResponseInner = {
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    index?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Search200ResponseInner
     */
    legalEntityIds?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    siren?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    tel?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    email?: string;
    /**
     * 
     * @type {Array<ContactSearch>}
     * @memberof Search200ResponseInner
     */
    contacts?: Array<ContactSearch>;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    legalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    clientLegalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    ref?: string;
    /**
     * 
     * @type {Date}
     * @memberof Search200ResponseInner
     */
    createDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    sectionNames?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Search200ResponseInner
     */
    addresses?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    refClient?: string;
    /**
     * 
     * @type {string}
     * @memberof Search200ResponseInner
     */
    description?: string;
}


            export type ServiceRecurrenceEnum = 'monthly' | 'yearly' | 'half-yearly' | 'quaterly';

            export type ServiceStatusEnum = 'new' | 'staging' | 'active' | 'ending' | 'terminated';
/**
 * 
 * @export
 */
export type Service = {
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    unitPriceDiscount?: number;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    unitPriceDiscountStr?: string;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    houseNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    houseNumberComplement?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    streetName?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    inseeCode?: string;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {Object}
     * @memberof Service
     */
    attributes?: Object;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    unitPriceStr?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    vat?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    recurrence?: ServiceRecurrenceEnum;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    y?: number;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    projection?: string;
    /**
     * 
     * @type {Product}
     * @memberof Service
     */
    product?: Product;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    status?: ServiceStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    subscriptionDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    activationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    endDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    terminationDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof Service
     */
    serviceContractId?: number;
    /**
     * 
     * @type {Date}
     * @memberof Service
     */
    paidUntil?: Date;
}


            export type ServiceContractAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';

            export type ServiceContractStatusEnum = 'new' | 'staging' | 'active' | 'ending' | 'terminated';
/**
 * 
 * @export
 */
export type ServiceContract = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof ServiceContract
     */
    availableWorkflows?: Array<ServiceContractAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof ServiceContract
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContract
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ServiceContract
     */
    canceledReason?: string;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    canceledDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ServiceContract
     */
    status?: ServiceContractStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof ServiceContract
     */
    legalEntityId?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceContract
     */
    clientContractId?: number;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    subscriptionDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    activationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    firstActivationDate?: Date;
    /**
     * 
     * @type {Offer}
     * @memberof ServiceContract
     */
    offer?: Offer;
    /**
     * 
     * @type {ClientLegalEntity}
     * @memberof ServiceContract
     */
    client?: ClientLegalEntity;
    /**
     * ref set by customer
     * @type {string}
     * @memberof ServiceContract
     */
    refClient?: string;
    /**
     * ref used by Prizz Telecom NOC
     * @type {string}
     * @memberof ServiceContract
     */
    refService?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContract
     */
    description?: string;
    /**
     * 
     * @type {Array<Service>}
     * @memberof ServiceContract
     */
    services?: Array<Service>;
    /**
     * 
     * @type {Array<ServiceContractNrc>}
     * @memberof ServiceContract
     */
    nrcs?: Array<ServiceContractNrc>;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    plannedActivationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    soldActivationDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContract
     */
    commitmentEndDate?: Date;
    /**
     * 
     * @type {{ [key: string]: AnyType; }}
     * @memberof ServiceContract
     */
    attributes?: { [key: string]: AnyType; };
    /**
     * 
     * @type {{ [key: string]: AnyType; }}
     * @memberof ServiceContract
     */
    consolidatedAttributes?: { [key: string]: AnyType; };
    /**
     * 
     * @type {{ [key: string]: AnyType; }}
     * @memberof ServiceContract
     */
    consolidatedAttributesStagingOrNew?: { [key: string]: AnyType; };
    /**
     * 
     * @type {Array<ServiceContractCommercialOffersInner>}
     * @memberof ServiceContract
     */
    commercialOffers?: Array<ServiceContractCommercialOffersInner>;
    /**
     * 
     * @type {Array<Contact>}
     * @memberof ServiceContract
     */
    contacts?: Array<Contact>;
    /**
     * 
     * @type {Array<TypedContact>}
     * @memberof ServiceContract
     */
    configuredContacts?: Array<TypedContact>;
    /**
     * 
     * @type {number}
     * @memberof ServiceContract
     */
    replaces?: number;
}

/**
 * 
 * @export
 */
export type ServiceContractCommercialOffersInner = {
    /**
     * 
     * @type {number}
     * @memberof ServiceContractCommercialOffersInner
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractCommercialOffersInner
     */
    name?: string;
}


            export type ServiceContractNrcRecurrenceEnum = 'monthly' | 'yearly' | 'half-yearly' | 'quaterly';
/**
 * 
 * @export
 */
export type ServiceContractNrc = {
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContractNrc
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContractNrc
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    unitPrice?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    unitPriceStr?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    vat?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    recurrence?: ServiceContractNrcRecurrenceEnum;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    quantity?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    unitPriceDiscount?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    unitPriceDiscountStr?: string;
    /**
     * 
     * @type {Object}
     * @memberof ServiceContractNrc
     */
    attributes?: Object;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    houseNumber?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    houseNumberComplement?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    streetName?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    postalCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    cityName?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    inseeCode?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    x?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    y?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    projection?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    serviceContractId?: number;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    baseItemId?: number;
    /**
     * 
     * @type {boolean}
     * @memberof ServiceContractNrc
     */
    billed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    price?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    priceStr?: string;
    /**
     * 
     * @type {number}
     * @memberof ServiceContractNrc
     */
    VATrate?: number;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    commercialCode?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractNrc
     */
    type?: string;
}

/**
 * 
 * @export
 */
export type ServiceContractSearch = {
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    index?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    legalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    clientLegalEntityId?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    refClient?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceContractSearch
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof ServiceContractSearch
     */
    createDate?: Date;
    /**
     * 
     * @type {Array<string>}
     * @memberof ServiceContractSearch
     */
    addresses?: Array<string>;
}

/**
 * 
 * @export
 */
export type SetCommercialOfferSectionOffer = {
    /**
     * 
     * @type {number}
     * @memberof SetCommercialOfferSectionOffer
     */
    offerId?: number;
    /**
     * 
     * @type {SetCommercialOfferSectionOfferEligibility}
     * @memberof SetCommercialOfferSectionOffer
     */
    eligibility?: SetCommercialOfferSectionOfferEligibility;
}

/**
 * 
 * @export
 */
export type SetCommercialOfferSectionOfferEligibility = {
    /**
     * adresse du site pour l\'offre L2
     * @type {string}
     * @memberof SetCommercialOfferSectionOfferEligibility
     */
    address?: string;
    /**
     * adresse du site A pour l\'offre FON
     * @type {string}
     * @memberof SetCommercialOfferSectionOfferEligibility
     */
    addressA?: string;
    /**
     * adresse du site B pour l\'offre FON
     * @type {string}
     * @memberof SetCommercialOfferSectionOfferEligibility
     */
    addressB?: string;
}

/**
 * 
 * @export
 */
export type SetServiceContractVlanRequest = {
    /**
     * vlan id in group
     * @type {number}
     * @memberof SetServiceContractVlanRequest
     */
    vid?: number;
}

/**
 * 
 * @export
 */
export type SignCommercialOffer = {
    /**
     * 
     * @type {string}
     * @memberof SignCommercialOffer
     */
    code?: string;
}


            export type SignCommercialOffer200ResponseStepEnum = 'codeSent' | 'signed';
/**
 * 
 * @export
 */
export type SignCommercialOffer200Response = {
    /**
     * 
     * @type {number}
     * @memberof SignCommercialOffer200Response
     */
    id?: number;
    /**
     * 
     * @type {boolean}
     * @memberof SignCommercialOffer200Response
     */
    success?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SignCommercialOffer200Response
     */
    lastLog?: string;
    /**
     * 
     * @type {string}
     * @memberof SignCommercialOffer200Response
     */
    step?: SignCommercialOffer200ResponseStepEnum;
}

/**
 * 
 * @export
 */
export type Ticket = {
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    id?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    operatorId?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    operatorName?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    numero?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    etat?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    etat_lib?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    titre?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    cust_name?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    ref_commande?: string;
    /**
     * 
     * @type {number}
     * @memberof Ticket
     */
    id_service_sicom?: number;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    ref_service?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    cust_address?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    ref_tiers?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    date_creation?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    date_ouverture?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    date_resolution?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    date_cloture?: string;
    /**
     * 
     * @type {string}
     * @memberof Ticket
     */
    last_message?: string;
    /**
     * 
     * @type {Array<RunningProcess>}
     * @memberof Ticket
     */
    running_process?: Array<RunningProcess>;
}

/**
 * 
 * @export
 */
export type TicketAttachment = {
    /**
     * 
     * @type {string}
     * @memberof TicketAttachment
     */
    preview_url?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAttachment
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAttachment
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof TicketAttachment
     */
    key?: string;
}

/**
 * 
 * @export
 */
export type Transition = {
    /**
     * 
     * @type {string}
     * @memberof Transition
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Transition
     */
    html?: string;
    /**
     * 
     * @type {Array<TransitionFormFieldsInner>}
     * @memberof Transition
     */
    formFields?: Array<TransitionFormFieldsInner>;
}

/**
 * 
 * @export
 */
export type TransitionFormFieldsInner = {
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInner
     */
    caption?: string;
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInner
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransitionFormFieldsInner
     */
    required?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInner
     */
    value?: string;
    /**
     * 
     * @type {Array<TransitionFormFieldsInnerValuesInner>}
     * @memberof TransitionFormFieldsInner
     */
    values?: Array<TransitionFormFieldsInnerValuesInner>;
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInner
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInner
     */
    help?: string;
    /**
     * 
     * @type {boolean}
     * @memberof TransitionFormFieldsInner
     */
    multiple?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof TransitionFormFieldsInner
     */
    expanded?: boolean;
}

/**
 * 
 * @export
 */
export type TransitionFormFieldsInnerValuesInner = {
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInnerValuesInner
     */
    key?: string;
    /**
     * 
     * @type {string}
     * @memberof TransitionFormFieldsInnerValuesInner
     */
    value?: string;
}


            export type TypedContactAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';

            export type TypedContactTypeEnum = 'DELIVERY' | 'SCHEDULED_MAINTENANCE' | 'INCIDENT' | 'ADMINISTRATIVE' | 'ACCOUNTING' | 'CONSTRUCTION_SITE';
/**
 * 
 * @export
 */
export type TypedContact = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof TypedContact
     */
    availableWorkflows?: Array<TypedContactAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof TypedContact
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TypedContact
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TypedContact
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof TypedContact
     */
    entityId?: number;
    /**
     * 
     * @type {string}
     * @memberof TypedContact
     */
    entityClass?: string;
    /**
     * 
     * @type {Contact}
     * @memberof TypedContact
     */
    contact?: Contact;
    /**
     * 
     * @type {string}
     * @memberof TypedContact
     */
    type?: TypedContactTypeEnum;
}

/**
 * 
 * @export
 */
export type UpdateCommercialOfferSectionItems = {
    /**
     * bandwith in mb/s
     * @type {string}
     * @memberof UpdateCommercialOfferSectionItems
     */
    bandwidth?: string;
    /**
     * duration and type
     * @type {string}
     * @memberof UpdateCommercialOfferSectionItems
     */
    grt?: string;
    /**
     * duration in months
     * @type {string}
     * @memberof UpdateCommercialOfferSectionItems
     */
    commitment?: string;
    /**
     * Construction time in days
     * @type {string}
     * @memberof UpdateCommercialOfferSectionItems
     */
    express?: string;
}


            export type UserAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type User = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof User
     */
    availableWorkflows?: Array<UserAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    firstname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    lastname?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    companyName?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone1?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    phone2?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    gender?: string;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof User
     */
    lastModifiedDate?: Date;
}


            export type UserApiTokenAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type UserApiToken = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof UserApiToken
     */
    availableWorkflows?: Array<UserApiTokenAvailableWorkflowsEnum>;
    /**
     * 
     * @type {Date}
     * @memberof UserApiToken
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserApiToken
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {number}
     * @memberof UserApiToken
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof UserApiToken
     */
    name?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserApiToken
     */
    active?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserApiToken
     */
    token?: string;
    /**
     * 
     * @type {Date}
     * @memberof UserApiToken
     */
    lastUsage?: Date;
}


            export type UserRoleAvailableWorkflowsEnum = 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommercialOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Submit\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Sign\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Rename\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RenameSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateOfferItemInOffer\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\SetOffer\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\AddComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\SubscribeThread\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateComment\\Context' | 'Infracorp\\Services\\Workflow\\Comment\\UpdateThread\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Invoice\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\CreateCommentThread\\Context' | 'Infracorp\\Services\\Workflow\\Users\\CreateToken\\Context' | 'Infracorp\\Services\\Workflow\\Users\\RevokeToken\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSubscribers\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AddItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\RemoveItem\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateSectionItems\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddContact\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntityContact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Contact\\Update\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateDescription\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\UpdateClientRef\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Activation\\SetupL2\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\UpdateClientRefSection\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\AssignContact\\Context' | 'Infracorp\\Services\\Workflow\\ServiceContract\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\CommercialOffer\\Contact\\SwitchActive\\Context' | 'Infracorp\\Services\\Workflow\\Users\\SwitchActiveRole\\Context' | 'Infracorp\\Services\\Workflow\\ClientLegalEntity\\AddUserRole\\Context';
/**
 * 
 * @export
 */
export type UserRole = {
    /**
     * liste des processus disponible pour l\'objet
     * @type {Array<string>}
     * @memberof UserRole
     */
    availableWorkflows?: Array<UserRoleAvailableWorkflowsEnum>;
    /**
     * 
     * @type {number}
     * @memberof UserRole
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof UserRole
     */
    createDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserRole
     */
    lastModifiedDate?: Date;
    /**
     * 
     * @type {User}
     * @memberof UserRole
     */
    user?: User;
    /**
     * 
     * @type {string}
     * @memberof UserRole
     */
    role?: string;
}

/**
 * 
 * @export
 */
export type Workflow = {
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    context?: string;
    /**
     * 
     * @type {number}
     * @memberof Workflow
     */
    entityId?: number;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    entityClass?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    state?: string;
    /**
     * 
     * @type {string}
     * @memberof Workflow
     */
    html?: string;
    /**
     * 
     * @type {Array<Transition>}
     * @memberof Workflow
     */
    transitions?: Array<Transition>;
}



/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add service contract comment
         * @summary Service Contract add comment
         * @throws {RequiredError}
         */
        addServiceContractComment(id: number, addServiceContractComment?: AddServiceContractComment, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling addServiceContractComment.');
            }
            const localVarPath = `/external-api/v2/service_contracts/{id}/comments`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof addServiceContractComment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(addServiceContractComment != null ? addServiceContractComment : {}) : (((addServiceContractComment:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Créer un devis
         * @summary Commercial Offers
         * @throws {RequiredError}
         */
        createCommercialOffer(createCommercialOffer: CreateCommercialOffer, options: RequestOptions): FetchArgs {
            // verify required parameter 'createCommercialOffer' is not null or undefined
            if (createCommercialOffer === null || createCommercialOffer === undefined) {
                throw new RequiredError('createCommercialOffer','Required parameter createCommercialOffer was null or undefined when calling createCommercialOffer.');
            }
            const localVarPath = `/external-api/v2/commercial_offers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createCommercialOffer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createCommercialOffer != null ? createCommercialOffer : {}) : (((createCommercialOffer:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ajouter une section à un devis
         * @summary Commercial Offer Sections
         * @throws {RequiredError}
         */
        createCommercialOfferSection(id: number, createCommercialOfferSection: CreateCommercialOfferSection, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createCommercialOfferSection.');
            }
            // verify required parameter 'createCommercialOfferSection' is not null or undefined
            if (createCommercialOfferSection === null || createCommercialOfferSection === undefined) {
                throw new RequiredError('createCommercialOfferSection','Required parameter createCommercialOfferSection was null or undefined when calling createCommercialOfferSection.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/sections`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createCommercialOfferSection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createCommercialOfferSection != null ? createCommercialOfferSection : {}) : (((createCommercialOfferSection:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Eligibility request for your user. One eligibility is made for each company allowed to your user
         * @summary Create Eligibility
         * @throws {RequiredError}
         */
        createEligibility(clientId: number, address?: string, lat?: number, lon?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'clientId' is not null or undefined
            if (clientId === null || clientId === undefined) {
                throw new RequiredError('clientId','Required parameter clientId was null or undefined when calling createEligibility.');
            }
            const localVarPath = `/external-api/v2/eligibility`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (address !== undefined) {
                localVarQueryParameter['address'] = ((address:any):string);
            }

            if (lat !== undefined) {
                localVarQueryParameter['lat'] = ((lat:any):string);
            }

            if (lon !== undefined) {
                localVarQueryParameter['lon'] = ((lon:any):string);
            }

            if (clientId !== undefined) {
                localVarQueryParameter['clientId'] = ((clientId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Créer un opérateur
         * @summary Exploitation Operator Tickets
         * @throws {RequiredError}
         */
        createTicketOperator(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createTicketOperator.');
            }
            const localVarPath = `/external-api/v2/exploitation/operator/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create workflow
         * @summary Workflows
         * @throws {RequiredError}
         */
        createWorkflow(createWorkflow: CreateWorkflow, options: RequestOptions): FetchArgs {
            // verify required parameter 'createWorkflow' is not null or undefined
            if (createWorkflow === null || createWorkflow === undefined) {
                throw new RequiredError('createWorkflow','Required parameter createWorkflow was null or undefined when calling createWorkflow.');
            }
            const localVarPath = `/external-api/v2/workflow`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof createWorkflow !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(createWorkflow != null ? createWorkflow : {}) : (((createWorkflow:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View last executed eligibilities
         * @summary Eligibility History
         * @throws {RequiredError}
         */
        eligibilityHistory(page?: number, itemsPerPage?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/eligibility/history`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer les clés d\'api pour un utilisateur
         * @summary User Api Tokens
         * @throws {RequiredError}
         */
        getApiTokens(page?: number, itemsPerPage?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/users/api_tokens`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get attachment
         * @summary Attachment
         * @throws {RequiredError}
         */
        getAttachment(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAttachment.');
            }
            const localVarPath = `/external-api/v2/attachments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * company list owned
         * @summary Client legal entities
         * @throws {RequiredError}
         */
        getClientLegalEntities(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', legalEntityId?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/client_legal_entities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            if (sortId !== undefined) {
                localVarQueryParameter['sort[id]'] = ((sortId:any):string);
            }

            if (legalEntityId !== undefined) {
                localVarQueryParameter['legalEntityId'] = ((legalEntityId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get customer company details
         * @summary Client legal entity
         * @throws {RequiredError}
         */
        getClientLegalEntity(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getClientLegalEntity.');
            }
            const localVarPath = `/external-api/v2/client_legal_entities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get comment thread
         * @summary Comment thread
         * @throws {RequiredError}
         */
        getCommentThread(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCommentThread.');
            }
            const localVarPath = `/external-api/v2/comments/threads/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get comment threads
         * @summary Comment threads
         * @throws {RequiredError}
         */
        getCommentThreads(entityClass: string, entityId: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'entityClass' is not null or undefined
            if (entityClass === null || entityClass === undefined) {
                throw new RequiredError('entityClass','Required parameter entityClass was null or undefined when calling getCommentThreads.');
            }
            // verify required parameter 'entityId' is not null or undefined
            if (entityId === null || entityId === undefined) {
                throw new RequiredError('entityId','Required parameter entityId was null or undefined when calling getCommentThreads.');
            }
            const localVarPath = `/external-api/v2/comments/threads`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (entityClass !== undefined) {
                localVarQueryParameter['entityClass'] = ((entityClass:any):string);
            }

            if (entityId !== undefined) {
                localVarQueryParameter['entityId'] = ((entityId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'un devis
         * @summary Commercial Offer
         * @throws {RequiredError}
         */
        getCommercialOffer(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCommercialOffer.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get commercial offer by name
         * @summary Commercial Offer
         * @throws {RequiredError}
         */
        getCommercialOfferByName(offerName: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'offerName' is not null or undefined
            if (offerName === null || offerName === undefined) {
                throw new RequiredError('offerName','Required parameter offerName was null or undefined when calling getCommercialOfferByName.');
            }
            const localVarPath = `/external-api/v2/commercial_offers_by_name/{offer_name}`
                .replace(`{${"offer_name"}}`, encodeURIComponent(String(offerName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get commercial offer item
         * @summary Commercial Offer Item
         * @throws {RequiredError}
         */
        getCommercialOfferItem(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCommercialOfferItem.');
            }
            const localVarPath = `/external-api/v2/commercial_offer_items/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le pdf d\'un devis
         * @summary Commercial Offer Pdf
         * @throws {RequiredError}
         */
        getCommercialOfferPdf(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCommercialOfferPdf.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get commercial offer section
         * @summary Commercial Offer Section
         * @throws {RequiredError}
         */
        getCommercialOfferSection(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getCommercialOfferSection.');
            }
            const localVarPath = `/external-api/v2/commercial_offer_sections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste de devis
         * @summary Commercial Offers
         * @throws {RequiredError}
         */
        getCommercialOffers(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortCreateDate?: 'ASC' | 'DESC', legalEntityId?: number, clientLegalEntityId?: number, sectionsOfferId?: number, status?: 'new' | 'estimate_pending' | 'approval_pending' | 'validated' | 'abandoned' | 'signed', createDateFrom?: Date, createDateTo?: Date, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/commercial_offers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            if (sortId !== undefined) {
                localVarQueryParameter['sort[id]'] = ((sortId:any):string);
            }

            if (sortCreateDate !== undefined) {
                localVarQueryParameter['sort[createDate]'] = ((sortCreateDate:any):string);
            }

            if (legalEntityId !== undefined) {
                localVarQueryParameter['legalEntityId'] = ((legalEntityId:any):string);
            }

            if (clientLegalEntityId !== undefined) {
                localVarQueryParameter['clientLegalEntityId'] = ((clientLegalEntityId:any):string);
            }

            if (sectionsOfferId !== undefined) {
                localVarQueryParameter['sections.offerId'] = ((sectionsOfferId:any):string);
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = ((status:any):string);
            }

            if (createDateFrom !== undefined) {
                localVarQueryParameter['createDate[from]'] = ((createDateFrom:any):Date).toISOString().slice(0, 10);
            }

            if (createDateTo !== undefined) {
                localVarQueryParameter['createDate[to]'] = ((createDateTo:any):Date).toISOString().slice(0, 10);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail de l\'utilisateur connecté
         * @summary User
         * @throws {RequiredError}
         */
        getCurrentUser(options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/user`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get eligibility result
         * @summary Get Eligibility
         * @throws {RequiredError}
         */
        getEligibility(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getEligibility.');
            }
            const localVarPath = `/external-api/v2/eligibility/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get entity linked attachments
         * @summary Attachements entity
         * @throws {RequiredError}
         */
        getEntityAttachments(entityId: number, entityType: 'invoice' | 'commercial_offer' | 'service_contract', options: RequestOptions): FetchArgs {
            // verify required parameter 'entityId' is not null or undefined
            if (entityId === null || entityId === undefined) {
                throw new RequiredError('entityId','Required parameter entityId was null or undefined when calling getEntityAttachments.');
            }
            // verify required parameter 'entityType' is not null or undefined
            if (entityType === null || entityType === undefined) {
                throw new RequiredError('entityType','Required parameter entityType was null or undefined when calling getEntityAttachments.');
            }
            const localVarPath = `/external-api/v2/attachments`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (entityId !== undefined) {
                localVarQueryParameter['entityId'] = ((entityId:any):string);
            }

            if (entityType !== undefined) {
                localVarQueryParameter['entityType'] = ((entityType:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'une facture
         * @summary Invoice
         * @throws {RequiredError}
         */
        getInvoice(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInvoice.');
            }
            const localVarPath = `/external-api/v2/invoices/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get invoice detail
         * @summary Invoice Detail
         * @throws {RequiredError}
         */
        getInvoiceDetail(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInvoiceDetail.');
            }
            const localVarPath = `/external-api/v2/invoice_details/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le pdf d\'une facture
         * @summary Invoice Pdf
         * @throws {RequiredError}
         */
        getInvoicePdf(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getInvoicePdf.');
            }
            const localVarPath = `/external-api/v2/invoices/{id}/pdf`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste de factures
         * @summary Invoices
         * @throws {RequiredError}
         */
        getInvoices(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortCreateDate?: 'ASC' | 'DESC', clientLegalEntityId?: number, legalEntityId?: number, month?: number, year?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/invoices`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            if (sortId !== undefined) {
                localVarQueryParameter['sort[id]'] = ((sortId:any):string);
            }

            if (sortCreateDate !== undefined) {
                localVarQueryParameter['sort[createDate]'] = ((sortCreateDate:any):string);
            }

            if (clientLegalEntityId !== undefined) {
                localVarQueryParameter['clientLegalEntityId'] = ((clientLegalEntityId:any):string);
            }

            if (legalEntityId !== undefined) {
                localVarQueryParameter['legalEntityId'] = ((legalEntityId:any):string);
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = ((month:any):string);
            }

            if (year !== undefined) {
                localVarQueryParameter['year'] = ((year:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste de sociétés
         * @summary Legal entities
         * @throws {RequiredError}
         */
        getLegalEntities(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/legal_entities`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            if (sortId !== undefined) {
                localVarQueryParameter['sort[id]'] = ((sortId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'une société
         * @summary Legal entity
         * @throws {RequiredError}
         */
        getLegalEntity(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getLegalEntity.');
            }
            const localVarPath = `/external-api/v2/legal_entities/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get an offer context
         * @summary Offers Context
         * @throws {RequiredError}
         */
        getOfferContext(id: number, items: Array<number>, distance?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOfferContext.');
            }
            // verify required parameter 'items' is not null or undefined
            if (items === null || items === undefined) {
                throw new RequiredError('items','Required parameter items was null or undefined when calling getOfferContext.');
            }
            const localVarPath = `/external-api/v2/offers/{id}/context`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (items) {
                localVarQueryParameter['items[]'] = items;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = ((distance:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all prices combinations for an offer and a price list
         * @summary Offers Contexts
         * @throws {RequiredError}
         */
        getOfferContexts(id: number, priceList: number, groups?: Array<'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national'>, autofillOffer?: boolean, items?: Array<number>, distance?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOfferContexts.');
            }
            // verify required parameter 'priceList' is not null or undefined
            if (priceList === null || priceList === undefined) {
                throw new RequiredError('priceList','Required parameter priceList was null or undefined when calling getOfferContexts.');
            }
            const localVarPath = `/external-api/v2/offers/{id}/contexts`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (priceList !== undefined) {
                localVarQueryParameter['priceList'] = ((priceList:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups[]'] = groups;
            }

            if (autofillOffer !== undefined) {
                localVarQueryParameter['autofillOffer'] = ((autofillOffer:any):string);
            }

            if (items) {
                localVarQueryParameter['items[]'] = items;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = ((distance:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all prices combinations for an offer and a price list (shortened)
         * @summary Offers Contexts
         * @throws {RequiredError}
         */
        getOfferContextsShortened(id: number, priceList: number, groups?: Array<'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national'>, autofillOffer?: boolean, items?: Array<number>, distance?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOfferContextsShortened.');
            }
            // verify required parameter 'priceList' is not null or undefined
            if (priceList === null || priceList === undefined) {
                throw new RequiredError('priceList','Required parameter priceList was null or undefined when calling getOfferContextsShortened.');
            }
            const localVarPath = `/external-api/v2/offers/{id}/contexts/shortened`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (priceList !== undefined) {
                localVarQueryParameter['priceList'] = ((priceList:any):string);
            }

            if (groups) {
                localVarQueryParameter['groups[]'] = groups;
            }

            if (autofillOffer !== undefined) {
                localVarQueryParameter['autofillOffer'] = ((autofillOffer:any):string);
            }

            if (items) {
                localVarQueryParameter['items[]'] = items;
            }

            if (distance !== undefined) {
                localVarQueryParameter['distance'] = ((distance:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste d\'offres
         * @summary Offers
         * @throws {RequiredError}
         */
        getOffers(ids?: Array<number>, codes?: Array<string>, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/offers`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            if (codes) {
                localVarQueryParameter['codes[]'] = codes;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lister les tickets pour l\'opérateur
         * @summary Exploitation Operator Tickets
         * @throws {RequiredError}
         */
        getOperatorTickets(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOperatorTickets.');
            }
            const localVarPath = `/external-api/v2/exploitation/operator/{id}/tickets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer un catalogue
         * @summary Price List
         * @throws {RequiredError}
         */
        getPriceList(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPriceList.');
            }
            const localVarPath = `/external-api/v2/price_lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste d\'éléments d\'un catalogue
         * @summary Price List Items
         * @throws {RequiredError}
         */
        getPriceListItems(ids: Array<number>, options: RequestOptions): FetchArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling getPriceListItems.');
            }
            const localVarPath = `/external-api/v2/price_lists_items`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer la liste des offres associées à un catalogue
         * @summary Price List Offers
         * @throws {RequiredError}
         */
        getPriceListOffers(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPriceListOffers.');
            }
            const localVarPath = `/external-api/v2/price_lists/{id}/offers`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste de catalogues
         * @summary Price Lists
         * @throws {RequiredError}
         */
        getPriceLists(ids: Array<number>, options: RequestOptions): FetchArgs {
            // verify required parameter 'ids' is not null or undefined
            if (ids === null || ids === undefined) {
                throw new RequiredError('ids','Required parameter ids was null or undefined when calling getPriceLists.');
            }
            const localVarPath = `/external-api/v2/price_lists`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (ids) {
                localVarQueryParameter['ids[]'] = ids;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Detail d\'un worklow de ticket
         * @summary Exploitation Process
         * @throws {RequiredError}
         */
        getProcess(id: number, processId: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getProcess.');
            }
            // verify required parameter 'processId' is not null or undefined
            if (processId === null || processId === undefined) {
                throw new RequiredError('processId','Required parameter processId was null or undefined when calling getProcess.');
            }
            const localVarPath = `/external-api/v2/exploitation/operator/{id}/process/{processId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get public attachments
         * @summary Attachments Public
         * @throws {RequiredError}
         */
        getPublicAttachments(options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/attachments/public`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get running workflows
         * @summary Workflows running
         * @throws {RequiredError}
         */
        getRunningWorkflows(contexts?: string, states?: string, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/workflows/running`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (contexts !== undefined) {
                localVarQueryParameter['contexts'] = ((contexts:any):string);
            }

            if (states !== undefined) {
                localVarQueryParameter['states'] = ((states:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'un service
         * @summary Service
         * @throws {RequiredError}
         */
        getService(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getService.');
            }
            const localVarPath = `/external-api/v2/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'un pack de services
         * @summary Service Contract
         * @throws {RequiredError}
         */
        getServiceContract(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getServiceContract.');
            }
            const localVarPath = `/external-api/v2/service_contracts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'un pack de services
         * @summary Service Contract by name
         * @throws {RequiredError}
         */
        getServiceContractByName(serviceName: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'serviceName' is not null or undefined
            if (serviceName === null || serviceName === undefined) {
                throw new RequiredError('serviceName','Required parameter serviceName was null or undefined when calling getServiceContractByName.');
            }
            const localVarPath = `/external-api/v2/service_contracts_by_name/{service_name}`
                .replace(`{${"service_name"}}`, encodeURIComponent(String(serviceName)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste de packs de services
         * @summary Service Contracts
         * @throws {RequiredError}
         */
        getServiceContracts(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortStatus?: 'ASC' | 'DESC', status?: 'new' | 'staging' | 'active' | 'ending' | 'terminated', legalEntityId?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/service_contracts`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            if (sortId !== undefined) {
                localVarQueryParameter['sort[id]'] = ((sortId:any):string);
            }

            if (sortStatus !== undefined) {
                localVarQueryParameter['sort[status]'] = ((sortStatus:any):string);
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = ((status:any):string);
            }

            if (legalEntityId !== undefined) {
                localVarQueryParameter['legalEntityId'] = ((legalEntityId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer une liste de services
         * @summary Services
         * @throws {RequiredError}
         */
        getServices(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', legalEntityId?: number, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (page !== undefined) {
                localVarQueryParameter['page'] = ((page:any):string);
            }

            if (itemsPerPage !== undefined) {
                localVarQueryParameter['itemsPerPage'] = ((itemsPerPage:any):string);
            }

            if (sortId !== undefined) {
                localVarQueryParameter['sort[id]'] = ((sortId:any):string);
            }

            if (legalEntityId !== undefined) {
                localVarQueryParameter['legalEntityId'] = ((legalEntityId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Récupérer le détail d\'un ticket
         * @summary Exploitation Ticket
         * @throws {RequiredError}
         */
        getTicket(id: number, ref: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTicket.');
            }
            // verify required parameter 'ref' is not null or undefined
            if (ref === null || ref === undefined) {
                throw new RequiredError('ref','Required parameter ref was null or undefined when calling getTicket.');
            }
            const localVarPath = `/external-api/v2/exploitation/operator/{id}/tickets/{ref}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"ref"}}`, encodeURIComponent(String(ref)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Lister les tickets
         * @summary Exploitation Tickets
         * @throws {RequiredError}
         */
        getTickets(sortDateCreation?: 'ASC' | 'DESC', etat?: 'ticket_setup' | 'att_prise_en_compte' | 'dispatch' | 'investigation' | 'resolu' | 'end', operator?: 42, showArchived?: boolean, options: RequestOptions): FetchArgs {
            const localVarPath = `/external-api/v2/exploitation/tickets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (sortDateCreation !== undefined) {
                localVarQueryParameter['sort[date_creation]'] = ((sortDateCreation:any):string);
            }

            if (etat !== undefined) {
                localVarQueryParameter['etat'] = ((etat:any):string);
            }

            if (operator !== undefined) {
                localVarQueryParameter['operator'] = ((operator:any):string);
            }

            if (showArchived !== undefined) {
                localVarQueryParameter['showArchived'] = ((showArchived:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get workflow
         * @summary Workflow
         * @throws {RequiredError}
         */
        getWorkflow(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getWorkflow.');
            }
            const localVarPath = `/external-api/v2/workflow/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ouvrir un ticket pour l\'opérateur
         * @summary Exploitation Tickets
         * @throws {RequiredError}
         */
        openTicket(id: number, serviceId?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling openTicket.');
            }
            const localVarPath = `/external-api/v2/exploitation/operator/{id}/tickets`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (serviceId !== undefined) {
                localVarQueryParameter['serviceId'] = ((serviceId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Supprimer une section
         * @summary Remove Commercial Offer Section
         * @throws {RequiredError}
         */
        removeCommercialOfferSection(id: number, sectionId: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling removeCommercialOfferSection.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling removeCommercialOfferSection.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/sections/{sectionId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Renommer une section
         * @summary Rename Commercial Offer Section
         * @throws {RequiredError}
         */
        renameCommercialOfferSection(id: number, sectionId: number, renameCommercialOfferSection: RenameCommercialOfferSection, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling renameCommercialOfferSection.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling renameCommercialOfferSection.');
            }
            // verify required parameter 'renameCommercialOfferSection' is not null or undefined
            if (renameCommercialOfferSection === null || renameCommercialOfferSection === undefined) {
                throw new RequiredError('renameCommercialOfferSection','Required parameter renameCommercialOfferSection was null or undefined when calling renameCommercialOfferSection.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/sections/{sectionId}/rename`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof renameCommercialOfferSection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(renameCommercialOfferSection != null ? renameCommercialOfferSection : {}) : (((renameCommercialOfferSection:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Executer un process
         * @summary Exploitation Process
         * @throws {RequiredError}
         */
        runProcess(id: number, processId: number, files?: Array<File>, transitionClass?: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling runProcess.');
            }
            // verify required parameter 'processId' is not null or undefined
            if (processId === null || processId === undefined) {
                throw new RequiredError('processId','Required parameter processId was null or undefined when calling runProcess.');
            }
            const localVarPath = `/external-api/v2/exploitation/operator/{id}/process/{processId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"processId"}}`, encodeURIComponent(String(processId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (files) {
                    localVarFormParams.set('files', files.join(COLLECTION_FORMATS["csv"]));
            }

            if (transitionClass !== undefined) {
                localVarFormParams.set('transition_class', ((transitionClass:any):string));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * run workflow
         * @summary Workflow
         * @throws {RequiredError}
         */
        runWorkflow(id: number, files?: Array<File>, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling runWorkflow.');
            }
            const localVarPath = `/external-api/v2/workflow/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            const localVarFormParams = new FormData();

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (files) {
                    localVarFormParams.set('files', files.join(COLLECTION_FORMATS["csv"]));
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            localVarRequestOptions.body = localVarFormParams;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Perform search
         * @summary Search
         * @throws {RequiredError}
         */
        search(q: string, legalEntityId?: number, clientLegalEntityId?: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'q' is not null or undefined
            if (q === null || q === undefined) {
                throw new RequiredError('q','Required parameter q was null or undefined when calling search.');
            }
            const localVarPath = `/external-api/v2/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            if (q !== undefined) {
                localVarQueryParameter['q'] = ((q:any):string);
            }

            if (legalEntityId !== undefined) {
                localVarQueryParameter['legalEntityId'] = ((legalEntityId:any):string);
            }

            if (clientLegalEntityId !== undefined) {
                localVarQueryParameter['clientLegalEntityId'] = ((clientLegalEntityId:any):string);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Appliquer une offre à une section
         * @summary Set Commercial Offer Section Offer
         * @throws {RequiredError}
         */
        setCommercialOfferSectionOffer(id: number, sectionId: number, setCommercialOfferSectionOffer: SetCommercialOfferSectionOffer, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setCommercialOfferSectionOffer.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling setCommercialOfferSectionOffer.');
            }
            // verify required parameter 'setCommercialOfferSectionOffer' is not null or undefined
            if (setCommercialOfferSectionOffer === null || setCommercialOfferSectionOffer === undefined) {
                throw new RequiredError('setCommercialOfferSectionOffer','Required parameter setCommercialOfferSectionOffer was null or undefined when calling setCommercialOfferSectionOffer.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/sections/{sectionId}/offer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof setCommercialOfferSectionOffer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(setCommercialOfferSectionOffer != null ? setCommercialOfferSectionOffer : {}) : (((setCommercialOfferSectionOffer:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set service contract vlan
         * @summary Service Contract set vlan
         * @throws {RequiredError}
         */
        setServiceContractVlan(id: number, setServiceContractVlanRequest: SetServiceContractVlanRequest, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling setServiceContractVlan.');
            }
            // verify required parameter 'setServiceContractVlanRequest' is not null or undefined
            if (setServiceContractVlanRequest === null || setServiceContractVlanRequest === undefined) {
                throw new RequiredError('setServiceContractVlanRequest','Required parameter setServiceContractVlanRequest was null or undefined when calling setServiceContractVlan.');
            }
            const localVarPath = `/external-api/v2/service_contracts/{id}/vlan`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof setServiceContractVlanRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(setServiceContractVlanRequest != null ? setServiceContractVlanRequest : {}) : (((setServiceContractVlanRequest:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Signer un devis
         * @summary Sign Commercial Offer
         * @throws {RequiredError}
         */
        signCommercialOffer(id: number, signCommercialOffer?: SignCommercialOffer, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling signCommercialOffer.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/sign`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof signCommercialOffer !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(signCommercialOffer != null ? signCommercialOffer : {}) : (((signCommercialOffer:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Valider un devis
         * @summary Submit Commercial Offer
         * @throws {RequiredError}
         */
        submitCommercialOffer(id: number, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling submitCommercialOffer.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/submit`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update items in commercial offer section
         * @summary Update Commercial Offer Section Items
         * @throws {RequiredError}
         */
        updateCommercialOfferSectionItems(id: number, sectionId: number, updateCommercialOfferSectionItems: UpdateCommercialOfferSectionItems, options: RequestOptions): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateCommercialOfferSectionItems.');
            }
            // verify required parameter 'sectionId' is not null or undefined
            if (sectionId === null || sectionId === undefined) {
                throw new RequiredError('sectionId','Required parameter sectionId was null or undefined when calling updateCommercialOfferSectionItems.');
            }
            // verify required parameter 'updateCommercialOfferSectionItems' is not null or undefined
            if (updateCommercialOfferSectionItems === null || updateCommercialOfferSectionItems === undefined) {
                throw new RequiredError('updateCommercialOfferSectionItems','Required parameter updateCommercialOfferSectionItems was null or undefined when calling updateCommercialOfferSectionItems.');
            }
            const localVarPath = `/external-api/v2/commercial_offers/{id}/sections/{sectionId}/update_items`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"sectionId"}}`, encodeURIComponent(String(sectionId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            // authentication tokenAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            // authentication bearerAuth required

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            localVarUrlObj.search = null;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof updateCommercialOfferSectionItems !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(updateCommercialOfferSectionItems != null ? updateCommercialOfferSectionItems : {}) : (((updateCommercialOfferSectionItems:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    addServiceContractComment(id: number, addServiceContractComment?: AddServiceContractComment, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    createCommercialOffer(createCommercialOffer: CreateCommercialOffer, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    createCommercialOfferSection(id: number, createCommercialOfferSection: CreateCommercialOfferSection, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    createEligibility(clientId: number, address?: string, lat?: number, lon?: number, options?: RequestOptions): Promise<CreateEligibility>,

    createTicketOperator(id: number, options?: RequestOptions): Promise<CreateOperator>,

    createWorkflow(createWorkflow: CreateWorkflow, options?: RequestOptions): Promise<GetWorkflow>,

    eligibilityHistory(page?: number, itemsPerPage?: number, options?: RequestOptions): Promise<EligibilityHistory200Response>,

    getApiTokens(page?: number, itemsPerPage?: number, options?: RequestOptions): Promise<GetApiTokens200Response>,

    getAttachment(id: number, options?: RequestOptions): Promise<Attachment>,

    getClientLegalEntities(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', legalEntityId?: number, options?: RequestOptions): Promise<GetClientLegalEntities200Response>,

    getClientLegalEntity(id: number, options?: RequestOptions): Promise<ClientLegalEntity>,

    getCommentThread(id: number, options?: RequestOptions): Promise<CommentThread>,

    getCommentThreads(entityClass: string, entityId: number, options?: RequestOptions): Promise<Array<CommentThread>>,

    getCommercialOffer(id: number, options?: RequestOptions): Promise<CommercialOffer>,

    getCommercialOfferByName(offerName: string, options?: RequestOptions): Promise<CommercialOffer>,

    getCommercialOfferItem(id: number, options?: RequestOptions): Promise<CommercialOfferItem>,

    getCommercialOfferPdf(id: number, options?: RequestOptions): Promise<File>,

    getCommercialOfferSection(id: number, options?: RequestOptions): Promise<CommercialOfferSection>,

    getCommercialOffers(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortCreateDate?: 'ASC' | 'DESC', legalEntityId?: number, clientLegalEntityId?: number, sectionsOfferId?: number, status?: 'new' | 'estimate_pending' | 'approval_pending' | 'validated' | 'abandoned' | 'signed', createDateFrom?: Date, createDateTo?: Date, options?: RequestOptions): Promise<GetCommercialOffers200Response>,

    getCurrentUser(options?: RequestOptions): Promise<User>,

    getEligibility(id: number, options?: RequestOptions): Promise<GetEligibility>,

    getEntityAttachments(entityId: number, entityType: 'invoice' | 'commercial_offer' | 'service_contract', options?: RequestOptions): Promise<GetPublicAttachments200Response>,

    getInvoice(id: number, options?: RequestOptions): Promise<Invoice>,

    getInvoiceDetail(id: number, options?: RequestOptions): Promise<InvoiceDetail>,

    getInvoicePdf(id: number, options?: RequestOptions): Promise<File>,

    getInvoices(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortCreateDate?: 'ASC' | 'DESC', clientLegalEntityId?: number, legalEntityId?: number, month?: number, year?: number, options?: RequestOptions): Promise<GetInvoices200Response>,

    getLegalEntities(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', options?: RequestOptions): Promise<GetLegalEntities200Response>,

    getLegalEntity(id: number, options?: RequestOptions): Promise<LegalEntity>,

    getOfferContext(id: number, items: Array<number>, distance?: number, options?: RequestOptions): Promise<OfferContext>,

    getOfferContexts(id: number, priceList: number, groups?: Array<'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national'>, autofillOffer?: boolean, items?: Array<number>, distance?: number, options?: RequestOptions): Promise<Array<OfferContext>>,

    getOfferContextsShortened(id: number, priceList: number, groups?: Array<'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national'>, autofillOffer?: boolean, items?: Array<number>, distance?: number, options?: RequestOptions): Promise<Array<OfferContextShortened>>,

    getOffers(ids?: Array<number>, codes?: Array<string>, options?: RequestOptions): Promise<Array<Offer>>,

    getOperatorTickets(id: number, options?: RequestOptions): Promise<Array<Ticket>>,

    getPriceList(id: number, options?: RequestOptions): Promise<PriceList>,

    getPriceListItems(ids: Array<number>, options?: RequestOptions): Promise<Array<PriceListItem>>,

    getPriceListOffers(id: number, options?: RequestOptions): Promise<PricesListOffers>,

    getPriceLists(ids: Array<number>, options?: RequestOptions): Promise<Array<PriceList>>,

    getProcess(id: number, processId: number, options?: RequestOptions): Promise<Process>,

    getPublicAttachments(options?: RequestOptions): Promise<GetPublicAttachments200Response>,

    getRunningWorkflows(contexts?: string, states?: string, options?: RequestOptions): Promise<GetRunningWorkflows200Response>,

    getService(id: number, options?: RequestOptions): Promise<Service>,

    getServiceContract(id: number, options?: RequestOptions): Promise<ServiceContract>,

    getServiceContractByName(serviceName: string, options?: RequestOptions): Promise<ServiceContract>,

    getServiceContracts(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortStatus?: 'ASC' | 'DESC', status?: 'new' | 'staging' | 'active' | 'ending' | 'terminated', legalEntityId?: number, options?: RequestOptions): Promise<GetServiceContracts200Response>,

    getServices(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', legalEntityId?: number, options?: RequestOptions): Promise<GetServices200Response>,

    getTicket(id: number, ref: string, options?: RequestOptions): Promise<OperatorTicket>,

    getTickets(sortDateCreation?: 'ASC' | 'DESC', etat?: 'ticket_setup' | 'att_prise_en_compte' | 'dispatch' | 'investigation' | 'resolu' | 'end', operator?: 42, showArchived?: boolean, options?: RequestOptions): Promise<Array<Ticket>>,

    getWorkflow(id: number, options?: RequestOptions): Promise<Workflow>,

    openTicket(id: number, serviceId?: number, options?: RequestOptions): Promise<CreateTicket>,

    removeCommercialOfferSection(id: number, sectionId: number, options?: RequestOptions): Promise<Response>,

    renameCommercialOfferSection(id: number, sectionId: number, renameCommercialOfferSection: RenameCommercialOfferSection, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    runProcess(id: number, processId: number, files?: Array<File>, transitionClass?: string, options?: RequestOptions): Promise<Process>,

    runWorkflow(id: number, files?: Array<File>, options?: RequestOptions): Promise<GetWorkflow>,

    search(q: string, legalEntityId?: number, clientLegalEntityId?: number, options?: RequestOptions): Promise<Array<Search200ResponseInner>>,

    setCommercialOfferSectionOffer(id: number, sectionId: number, setCommercialOfferSectionOffer: SetCommercialOfferSectionOffer, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    setServiceContractVlan(id: number, setServiceContractVlanRequest: SetServiceContractVlanRequest, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    signCommercialOffer(id: number, signCommercialOffer?: SignCommercialOffer, options?: RequestOptions): Promise<SignCommercialOffer200Response>,

    submitCommercialOffer(id: number, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,

    updateCommercialOfferSectionItems(id: number, sectionId: number, updateCommercialOfferSectionItems: UpdateCommercialOfferSectionItems, options?: RequestOptions): Promise<CreateCommercialOffer201Response>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Add service contract comment
         * @summary Service Contract add comment
         * @throws {RequiredError}
         */
        addServiceContractComment(id: number, addServiceContractComment?: AddServiceContractComment, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).addServiceContractComment(id, addServiceContractComment, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Créer un devis
         * @summary Commercial Offers
         * @throws {RequiredError}
         */
        createCommercialOffer(createCommercialOffer: CreateCommercialOffer, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createCommercialOffer(createCommercialOffer, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Ajouter une section à un devis
         * @summary Commercial Offer Sections
         * @throws {RequiredError}
         */
        createCommercialOfferSection(id: number, createCommercialOfferSection: CreateCommercialOfferSection, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createCommercialOfferSection(id, createCommercialOfferSection, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Eligibility request for your user. One eligibility is made for each company allowed to your user
         * @summary Create Eligibility
         * @throws {RequiredError}
         */
        createEligibility(clientId: number, address?: string, lat?: number, lon?: number, options?: RequestOptions = {}): Promise<CreateEligibility> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createEligibility(clientId, address, lat, lon, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Créer un opérateur
         * @summary Exploitation Operator Tickets
         * @throws {RequiredError}
         */
        createTicketOperator(id: number, options?: RequestOptions = {}): Promise<CreateOperator> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createTicketOperator(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Create workflow
         * @summary Workflows
         * @throws {RequiredError}
         */
        createWorkflow(createWorkflow: CreateWorkflow, options?: RequestOptions = {}): Promise<GetWorkflow> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).createWorkflow(createWorkflow, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * View last executed eligibilities
         * @summary Eligibility History
         * @throws {RequiredError}
         */
        eligibilityHistory(page?: number, itemsPerPage?: number, options?: RequestOptions = {}): Promise<EligibilityHistory200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).eligibilityHistory(page, itemsPerPage, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer les clés d\'api pour un utilisateur
         * @summary User Api Tokens
         * @throws {RequiredError}
         */
        getApiTokens(page?: number, itemsPerPage?: number, options?: RequestOptions = {}): Promise<GetApiTokens200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getApiTokens(page, itemsPerPage, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get attachment
         * @summary Attachment
         * @throws {RequiredError}
         */
        getAttachment(id: number, options?: RequestOptions = {}): Promise<Attachment> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getAttachment(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * company list owned
         * @summary Client legal entities
         * @throws {RequiredError}
         */
        getClientLegalEntities(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', legalEntityId?: number, options?: RequestOptions = {}): Promise<GetClientLegalEntities200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getClientLegalEntities(page, itemsPerPage, sortId, legalEntityId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get customer company details
         * @summary Client legal entity
         * @throws {RequiredError}
         */
        getClientLegalEntity(id: number, options?: RequestOptions = {}): Promise<ClientLegalEntity> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getClientLegalEntity(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get comment thread
         * @summary Comment thread
         * @throws {RequiredError}
         */
        getCommentThread(id: number, options?: RequestOptions = {}): Promise<CommentThread> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommentThread(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get comment threads
         * @summary Comment threads
         * @throws {RequiredError}
         */
        getCommentThreads(entityClass: string, entityId: number, options?: RequestOptions = {}): Promise<Array<CommentThread>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommentThreads(entityClass, entityId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'un devis
         * @summary Commercial Offer
         * @throws {RequiredError}
         */
        getCommercialOffer(id: number, options?: RequestOptions = {}): Promise<CommercialOffer> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommercialOffer(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get commercial offer by name
         * @summary Commercial Offer
         * @throws {RequiredError}
         */
        getCommercialOfferByName(offerName: string, options?: RequestOptions = {}): Promise<CommercialOffer> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommercialOfferByName(offerName, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get commercial offer item
         * @summary Commercial Offer Item
         * @throws {RequiredError}
         */
        getCommercialOfferItem(id: number, options?: RequestOptions = {}): Promise<CommercialOfferItem> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommercialOfferItem(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le pdf d\'un devis
         * @summary Commercial Offer Pdf
         * @throws {RequiredError}
         */
        getCommercialOfferPdf(id: number, options?: RequestOptions = {}): Promise<File> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommercialOfferPdf(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get commercial offer section
         * @summary Commercial Offer Section
         * @throws {RequiredError}
         */
        getCommercialOfferSection(id: number, options?: RequestOptions = {}): Promise<CommercialOfferSection> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommercialOfferSection(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste de devis
         * @summary Commercial Offers
         * @throws {RequiredError}
         */
        getCommercialOffers(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortCreateDate?: 'ASC' | 'DESC', legalEntityId?: number, clientLegalEntityId?: number, sectionsOfferId?: number, status?: 'new' | 'estimate_pending' | 'approval_pending' | 'validated' | 'abandoned' | 'signed', createDateFrom?: Date, createDateTo?: Date, options?: RequestOptions = {}): Promise<GetCommercialOffers200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCommercialOffers(page, itemsPerPage, sortId, sortCreateDate, legalEntityId, clientLegalEntityId, sectionsOfferId, status, createDateFrom, createDateTo, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail de l\'utilisateur connecté
         * @summary User
         * @throws {RequiredError}
         */
        getCurrentUser(options?: RequestOptions = {}): Promise<User> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getCurrentUser(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get eligibility result
         * @summary Get Eligibility
         * @throws {RequiredError}
         */
        getEligibility(id: number, options?: RequestOptions = {}): Promise<GetEligibility> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getEligibility(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get entity linked attachments
         * @summary Attachements entity
         * @throws {RequiredError}
         */
        getEntityAttachments(entityId: number, entityType: 'invoice' | 'commercial_offer' | 'service_contract', options?: RequestOptions = {}): Promise<GetPublicAttachments200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getEntityAttachments(entityId, entityType, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'une facture
         * @summary Invoice
         * @throws {RequiredError}
         */
        getInvoice(id: number, options?: RequestOptions = {}): Promise<Invoice> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getInvoice(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get invoice detail
         * @summary Invoice Detail
         * @throws {RequiredError}
         */
        getInvoiceDetail(id: number, options?: RequestOptions = {}): Promise<InvoiceDetail> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getInvoiceDetail(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le pdf d\'une facture
         * @summary Invoice Pdf
         * @throws {RequiredError}
         */
        getInvoicePdf(id: number, options?: RequestOptions = {}): Promise<File> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getInvoicePdf(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste de factures
         * @summary Invoices
         * @throws {RequiredError}
         */
        getInvoices(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortCreateDate?: 'ASC' | 'DESC', clientLegalEntityId?: number, legalEntityId?: number, month?: number, year?: number, options?: RequestOptions = {}): Promise<GetInvoices200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getInvoices(page, itemsPerPage, sortId, sortCreateDate, clientLegalEntityId, legalEntityId, month, year, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste de sociétés
         * @summary Legal entities
         * @throws {RequiredError}
         */
        getLegalEntities(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', options?: RequestOptions = {}): Promise<GetLegalEntities200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getLegalEntities(page, itemsPerPage, sortId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'une société
         * @summary Legal entity
         * @throws {RequiredError}
         */
        getLegalEntity(id: number, options?: RequestOptions = {}): Promise<LegalEntity> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getLegalEntity(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get an offer context
         * @summary Offers Context
         * @throws {RequiredError}
         */
        getOfferContext(id: number, items: Array<number>, distance?: number, options?: RequestOptions = {}): Promise<OfferContext> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOfferContext(id, items, distance, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get all prices combinations for an offer and a price list
         * @summary Offers Contexts
         * @throws {RequiredError}
         */
        getOfferContexts(id: number, priceList: number, groups?: Array<'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national'>, autofillOffer?: boolean, items?: Array<number>, distance?: number, options?: RequestOptions = {}): Promise<Array<OfferContext>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOfferContexts(id, priceList, groups, autofillOffer, items, distance, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get all prices combinations for an offer and a price list (shortened)
         * @summary Offers Contexts
         * @throws {RequiredError}
         */
        getOfferContextsShortened(id: number, priceList: number, groups?: Array<'bandwidth' | 'grt' | 'nrc' | 'commitment' | 'pop' | 'upgade_lag' | 'securisation' | 'express' | 'distance' | 'fiber_count' | 'extremities' | 'extremity_site_a' | 'extremity_site_b' | 'racco_event' | 'subnet' | 'maintenance' | 'desserte' | 'volume' | 'national'>, autofillOffer?: boolean, items?: Array<number>, distance?: number, options?: RequestOptions = {}): Promise<Array<OfferContextShortened>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOfferContextsShortened(id, priceList, groups, autofillOffer, items, distance, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste d\'offres
         * @summary Offers
         * @throws {RequiredError}
         */
        getOffers(ids?: Array<number>, codes?: Array<string>, options?: RequestOptions = {}): Promise<Array<Offer>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOffers(ids, codes, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Lister les tickets pour l\'opérateur
         * @summary Exploitation Operator Tickets
         * @throws {RequiredError}
         */
        getOperatorTickets(id: number, options?: RequestOptions = {}): Promise<Array<Ticket>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getOperatorTickets(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer un catalogue
         * @summary Price List
         * @throws {RequiredError}
         */
        getPriceList(id: number, options?: RequestOptions = {}): Promise<PriceList> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPriceList(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste d\'éléments d\'un catalogue
         * @summary Price List Items
         * @throws {RequiredError}
         */
        getPriceListItems(ids: Array<number>, options?: RequestOptions = {}): Promise<Array<PriceListItem>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPriceListItems(ids, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer la liste des offres associées à un catalogue
         * @summary Price List Offers
         * @throws {RequiredError}
         */
        getPriceListOffers(id: number, options?: RequestOptions = {}): Promise<PricesListOffers> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPriceListOffers(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste de catalogues
         * @summary Price Lists
         * @throws {RequiredError}
         */
        getPriceLists(ids: Array<number>, options?: RequestOptions = {}): Promise<Array<PriceList>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPriceLists(ids, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Detail d\'un worklow de ticket
         * @summary Exploitation Process
         * @throws {RequiredError}
         */
        getProcess(id: number, processId: number, options?: RequestOptions = {}): Promise<Process> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getProcess(id, processId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get public attachments
         * @summary Attachments Public
         * @throws {RequiredError}
         */
        getPublicAttachments(options?: RequestOptions = {}): Promise<GetPublicAttachments200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getPublicAttachments(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get running workflows
         * @summary Workflows running
         * @throws {RequiredError}
         */
        getRunningWorkflows(contexts?: string, states?: string, options?: RequestOptions = {}): Promise<GetRunningWorkflows200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getRunningWorkflows(contexts, states, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'un service
         * @summary Service
         * @throws {RequiredError}
         */
        getService(id: number, options?: RequestOptions = {}): Promise<Service> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getService(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'un pack de services
         * @summary Service Contract
         * @throws {RequiredError}
         */
        getServiceContract(id: number, options?: RequestOptions = {}): Promise<ServiceContract> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getServiceContract(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'un pack de services
         * @summary Service Contract by name
         * @throws {RequiredError}
         */
        getServiceContractByName(serviceName: string, options?: RequestOptions = {}): Promise<ServiceContract> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getServiceContractByName(serviceName, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste de packs de services
         * @summary Service Contracts
         * @throws {RequiredError}
         */
        getServiceContracts(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', sortStatus?: 'ASC' | 'DESC', status?: 'new' | 'staging' | 'active' | 'ending' | 'terminated', legalEntityId?: number, options?: RequestOptions = {}): Promise<GetServiceContracts200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getServiceContracts(page, itemsPerPage, sortId, sortStatus, status, legalEntityId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer une liste de services
         * @summary Services
         * @throws {RequiredError}
         */
        getServices(page?: number, itemsPerPage?: number, sortId?: 'ASC' | 'DESC', legalEntityId?: number, options?: RequestOptions = {}): Promise<GetServices200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getServices(page, itemsPerPage, sortId, legalEntityId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Récupérer le détail d\'un ticket
         * @summary Exploitation Ticket
         * @throws {RequiredError}
         */
        getTicket(id: number, ref: string, options?: RequestOptions = {}): Promise<OperatorTicket> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTicket(id, ref, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Lister les tickets
         * @summary Exploitation Tickets
         * @throws {RequiredError}
         */
        getTickets(sortDateCreation?: 'ASC' | 'DESC', etat?: 'ticket_setup' | 'att_prise_en_compte' | 'dispatch' | 'investigation' | 'resolu' | 'end', operator?: 42, showArchived?: boolean, options?: RequestOptions = {}): Promise<Array<Ticket>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getTickets(sortDateCreation, etat, operator, showArchived, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * get workflow
         * @summary Workflow
         * @throws {RequiredError}
         */
        getWorkflow(id: number, options?: RequestOptions = {}): Promise<Workflow> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).getWorkflow(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Ouvrir un ticket pour l\'opérateur
         * @summary Exploitation Tickets
         * @throws {RequiredError}
         */
        openTicket(id: number, serviceId?: number, options?: RequestOptions = {}): Promise<CreateTicket> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).openTicket(id, serviceId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Supprimer une section
         * @summary Remove Commercial Offer Section
         * @throws {RequiredError}
         */
        removeCommercialOfferSection(id: number, sectionId: number, options?: RequestOptions = {}): Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).removeCommercialOfferSection(id, sectionId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response;
                } else {
                    throw response;
                }
            });
        },
        /**
         * Renommer une section
         * @summary Rename Commercial Offer Section
         * @throws {RequiredError}
         */
        renameCommercialOfferSection(id: number, sectionId: number, renameCommercialOfferSection: RenameCommercialOfferSection, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).renameCommercialOfferSection(id, sectionId, renameCommercialOfferSection, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Executer un process
         * @summary Exploitation Process
         * @throws {RequiredError}
         */
        runProcess(id: number, processId: number, files?: Array<File>, transitionClass?: string, options?: RequestOptions = {}): Promise<Process> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).runProcess(id, processId, files, transitionClass, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * run workflow
         * @summary Workflow
         * @throws {RequiredError}
         */
        runWorkflow(id: number, files?: Array<File>, options?: RequestOptions = {}): Promise<GetWorkflow> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).runWorkflow(id, files, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Perform search
         * @summary Search
         * @throws {RequiredError}
         */
        search(q: string, legalEntityId?: number, clientLegalEntityId?: number, options?: RequestOptions = {}): Promise<Array<Search200ResponseInner>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).search(q, legalEntityId, clientLegalEntityId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Appliquer une offre à une section
         * @summary Set Commercial Offer Section Offer
         * @throws {RequiredError}
         */
        setCommercialOfferSectionOffer(id: number, sectionId: number, setCommercialOfferSectionOffer: SetCommercialOfferSectionOffer, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).setCommercialOfferSectionOffer(id, sectionId, setCommercialOfferSectionOffer, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Set service contract vlan
         * @summary Service Contract set vlan
         * @throws {RequiredError}
         */
        setServiceContractVlan(id: number, setServiceContractVlanRequest: SetServiceContractVlanRequest, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).setServiceContractVlan(id, setServiceContractVlanRequest, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Signer un devis
         * @summary Sign Commercial Offer
         * @throws {RequiredError}
         */
        signCommercialOffer(id: number, signCommercialOffer?: SignCommercialOffer, options?: RequestOptions = {}): Promise<SignCommercialOffer200Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).signCommercialOffer(id, signCommercialOffer, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Valider un devis
         * @summary Submit Commercial Offer
         * @throws {RequiredError}
         */
        submitCommercialOffer(id: number, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).submitCommercialOffer(id, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update items in commercial offer section
         * @summary Update Commercial Offer Section Items
         * @throws {RequiredError}
         */
        updateCommercialOfferSectionItems(id: number, sectionId: number, updateCommercialOfferSectionItems: UpdateCommercialOfferSectionItems, options?: RequestOptions = {}): Promise<CreateCommercialOffer201Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).updateCommercialOfferSectionItems(id, sectionId, updateCommercialOfferSectionItems, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};


export type ApiTypes = { 
    DefaultApi: DefaultApiType,
 }
